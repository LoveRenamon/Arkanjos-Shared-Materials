"EyeRefract"
{
//////////////////////////////////////////////////////////////////////////////////
// This will dynamically scale pupil with lighting that a entity see.
//
// By: Davi (Debiddo) Gooz
//////////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////////
  // Useful parameters to be changed
  //////////////////////////////////////////////////////////////////////////////////
  $Iris "shared/eyes/type1_blue"
  $CorneaTexture "Engine/eye-cornea"              // its a linear multi purpose texture: Red and Blue drives X and Y normal | Blue drive the displacement (AKA.: Parallax) | Alpha drives the light intensity
  $lightwarptexture "shared/lightwarp_dod_snow"   // act like a color ramp, good for NPR
  $EnvMap "Engine/eye-reflection-cubemap-"        // the specullar texture, for a dynamic one, use "env_cubemap"

  $AmbientOcclusion "1"                           // Enable Disable AmbientOcclusionTexture and AmbientOcclusionColor
  $AmbientOcclColor " [ .33 .33 .33 ] "           // Same as "Decal Modulate" Tint Ambient Occlusion with this RGB color; When aboce 128 brighten and bellow make it darker
  $AmbientOcclTexture "shared/eye_ao"             // The path to AmbientOcclusionTexture

  $EyeballRadius "1"       // the eyeball size for $RayTraceSphere
  $RayTraceSphere "0"      // mark the shader to RayTrace and tweak UVMap with PixelShader 2.0 | Allow a true sphere on a flat surface, so flexes can bend and $Iris will be nicer rendered
  $SphereTexkillCombo "0"  // curl $Iris based on the $EyeballRadius

  //////////////////////////////////////////////////////////////////////////////////
  // Not really necessary change, unless you're using some custom Cornea Texture
  //////////////////////////////////////////////////////////////////////////////////
  $Dilation      ".5"  // The pupil size (Min: 0.2 | Max: 0.8)
  $Glossiness    ".8"  // the base intensity for $EnvMap (same as set any $EnvMapTint grey color)
  $MinGlossiness ".4"  // Minimum allowed intensity for $EnvMap
  $MaxGlossiness ".8"  // Maximum allowed intensity for $EnvMap

  $ParallaxStrength ".25"  // is a a displacement at $CorneaTexture Blue Channel
  $CorneaBumpStrength "1"  // This is the "BumpMap" / "NormalMap" intensity

  //////////////////////////////////////////////////////////////////////////////////
  // Not really necessary be changed unlees you know what you're doing
  //////////////////////////////////////////////////////////////////////////////////
  $HalfLambert "1"
  $EyeOrigin " [ 0 0 0 ] "
  $NoDecal "1"

  $MinDilation ".2"
  $MaxDilation ".8"

  $PupilOpenRate ".34" // how fast Pupil dilates
  $PupilCloseRate ".1" // how fast Pupil contract

  //////////////////////////////////////////////////////////////////////////////////
  // Fail safe parameters
  //////////////////////////////////////////////////////////////////////////////////
  $ClampS "1"
  $ClampT "1"
  $ClampU "0"

  $NoMip "0"

  $IrisU " [ 0 1 0 0 ] "
  $IrisV " [ 0 0 1 0 ] "

  $lighting ".5"
  $light    ".5"

  $taylor "1.0"
  $const1 "2.2"
  $const2 "1.32"
  $const3 ".088"
  $const4 "-.0176"
  $expConst ".0"
  $exp ".0"
  $temp ".0"

  $five ".5"
  $four ".4"
  $one ".01"
  $co1 "1.2"
  $co2 ".2357"
  $co3 "3.6"
  $quad1 ".0"
  $quad2 ".0"


  //////////////////////////////////////////////////////////////////////////////////
  // Proxies, I'll not explain nothing. It's just math
  //////////////////////////////////////////////////////////////////////////////////
  Proxies {

    Pupil {
      TextureVar $Iris
      TextureFrameNumVar $Irisframe
      PupilCloseRate $PupilCloseRate
      PupilOpenRate $PupilOpenRate
    }


    Equals {
      srcVar1 $lighting
      resultVar $Dilation
    }

    Clamp {
      min $MinDilation
      max $MaxDilation
      srcVar1 $Dilation
      resultVar $Dilation
    }


    //    Start Gamma Correction (2.2) //

    // can't raise to fractional values, so use approximations
    // 1 + 2.2(x-1) + 1.32(x-1)^2 + 0.088(x-1)^3 - 0.0176(x-1)^4, 0.4 < x < 1
    // 3.6(0.5x)^2 - 0.01, 0.2357 < x < 0.4
    // 0.5(1.2x)^2, 0 < x < 0.2357

    Equals {
      srcVar1 $lighting
      resultVar $light
    }

    Subtract {
      srcVar1 $light
      srcVar2 $taylor
      resultVar $expConst
    }
    Equals {
      srcVar1 $expConst
      resultVar $exp
    }


    Multiply {
      srcVar1 $const1
      srcVar2 $exp
      resultVar $temp
    }
    Add {
      srcVar1 $taylor
      srcVar2 $temp
      resultVar $taylor
    }


    Multiply {
      srcVar1 $exp
      srcVar2 $expConst
      resultVar $exp
    }
    Multiply {
      srcVar1 $const2
      srcVar2 $exp
      resultVar $temp
    }
    Add {
      srcVar1 $taylor
      srcVar2 $temp
      resultVar $taylor
    }


    Multiply {
      srcVar1 $exp
      srcVar2 $expConst
      resultVar $exp
    }
    Multiply {
      srcVar1 $const3
      srcVar2 $exp
      resultVar $temp
    }
    Add {
      srcVar1 $taylor
      srcVar2 $temp
      resultVar $taylor
    }


    Multiply {
      srcVar1 $exp
      srcVar2 $expConst
      resultVar $exp
    }
    Multiply {
      srcVar1 $const4
      srcVar2 $exp
      resultVar $temp
    }
    Add {
      srcVar1 $taylor
      srcVar2 $temp
      resultVar $taylor
    }


    Multiply {
      srcVar1 $light
      srcVar2 $co1
      resultVar $temp
    }
    Multiply {
      srcVar1 $temp
      srcVar2 $temp
      resultVar $temp
    }
    Multiply {
      srcVar1 $temp
      srcVar2 $five
      resultVar $quad1
    }


    Multiply {
      srcVar1 $light
      srcVar2 $five
      resultVar $temp
    }
    Multiply {
      srcVar1 $temp
      srcVar2 $temp
      resultVar $temp
    }
    Multiply {
      srcVar1 $temp
      srcVar2 $co3
      resultVar $temp
    }
    Subtract {
      srcVar1 $temp
      srcVar2 $one
      resultVar $quad2
    }


    LessOrEqual {
      LessEqualVar $quad1
      greaterVar $quad2
      srcVar1 $light
      srcVar2 $co2
      resultVar $temp
    }
    LessOrEqual {
      LessEqualVar $temp
      greaterVar $taylor
      srcVar1 $light
      srcVar2 $four
      resultVar $temp
    }
    Equals {
      srcVar1 $temp
      resultVar $light
    }

    //    End Gamma Correction    //

    // Garry's Mod only works as is
    Equals {
      srcVar1 $temp
      resultVar $Glossiness
    }
    Clamp {
      min $MinGlossiness
      max $MaxGlossiness
      srcVar1 $Glossiness
      resultVar $Glossiness
    }
  }
}
