VertexLitGeneric
{
//////////////////////////////////////////////////////////////////////////////////
// Version 3.2.1
// Honkai Impact 3rd preset by Debiddo speacialy for Left 4 Dead 2
// Burn Effects and dynamic color modulation based where the entity is looking. 
// The purpose is avoid overexposure for Anime-like characters
//
// Note: this works only for entities! static props will make the game crash!
// Note: this is bundled with "IT" (Bile) effect, for "Burn" use vertexlit_anime_burn_l4d2.vmt!
//
//
// By: Davi (Debiddo) Gooz 
// Steam: https://steamcommunity.com/id/Debiddo
//////////////////////////////////////////////////////////////////////////////////
// include this file with:
////
// path {
//  include "materials/shared/vertexlit_anime_l4d2.vmt"
//  insert {
//    $BaseTexture "your_albedo_texture_here"
//    $EmissiveBlendBaseTexture "your_albedo_texture_here_gain"
//    // rest of your desired vmt parameters
//  }
// }
//
//////
//
// "Manual" here: https://github.com/LoveRenamon/Debiddos-Shared-Materials/blob/dev/materials/shared/vertexlit_anime_heavy_l4d2.vmt
//////////////////////////////////////////////////////////////////////////////////

  $basetexture "vgui/white"

  // We don't really need a normal map, use if you wish to...
  //$bumpmap "dev/flat_normal"

  // If using a $bumpmap and you have a Phong Mask at Alpha Channel remeber to disable:
  $basemapluminancephongmask "1"

  // Here the magic of a lightwarp that have some amount of red and make some fake skin scattering
  $lightwarptexture "shared/lightwarp_honkai3rd_l4d2"
  // Or this one which is the most common lightwarp used for anime characters over workshop
  //$lightwarptexture "shared/lightwarp_anime"
  // many more lightwarps at: https://github.com/LoveRenamon/Debiddos-Shared-Materials/tree/dev/materials/shared


  //////////////////////////////////////////////////////////////////////////////////
  // Swtich values
  //////////////////////////////////////////////////////////////////////////////////
  // set "1" to disable cull and render both sides or allow cull for performace and avoid Z-Fighting
  $nocull "1"

  // allow decals for damage effects by bullets, If you'r model is expensive and unoptimized, you will need to set "1"
  // NOTE: FOR ALL SOURCE ENGINE x86 BRANCHES: MODELS WITH >= 32768 VERTICES DO NEED THIS BE "1", NO EXCEPTIONS!
  $nodecal "0"


  //////////////////////////////////////////////////////////////////////////////////
  // Enable / Disable tilling
  //  It will expose your shitty made UVMap
  //////////////////////////////////////////////////////////////////////////////////
  $ClampS "1" // Clamp S/X texture coordinates by default
  $ClampT "1" // Clamp T/Y texture coordinates by default
  $ClampU "0" // Clamp U/Z texture coordinates by default


  //////////////////////////////////////////////////////////////////////////////////
  // Tweak diffuse
  //  Only have effect with $HalfLambert "0"
  //////////////////////////////////////////////////////////////////////////////////
  //$diffuseexp  ".2"     // create nice diffuse gradients by warp the entire lambertian radiosity, 
  //$halflambert "0"      // When true, warp radiosity to be at {{ 0.5 .. 1 }} range.
  //NOTE: $diffuseexp Empty value have a different effect than "0" and without the declared parameter.


  //////////////////////////////////////////////////////////////////////////////////
  // Phong
  //  Phong is an old specular method. Small amounts are good for a dry skin or opaque micro surface
  //  it computes by a exponent driven by a additive $phongboot and exponencial $phongexponent
  //  Fresnel is same as the every fresnel, that can be boosted by $phongfresnelranges
  //////////////////////////////////////////////////////////////////////////////////

  $phong "1"      // We'll use phong specular render pass
  $forcephong "1" // force phong for potato PCs

  // engine default white texture to enable phong tint
  $phongexponenttexture "vgui/white"

  // make phong weaker, required for most cases, use only one of th bellow recommended
  //$phongboost ".02"  //   2% effect. almost invisible
  //$phongboost ".2"   //  20% effect
  $phongboost ".5"     //  50% effect, seens rasionable if the texture is too bright
  //$phongboost "1.0"  // 100% effect, seens rasionable if you have a custom mask

  $phongalbedotint "1" // use the $BaseTexture's RGB as tint value per textel

  // Phong Fresnel Ranges are like "intensity modulator" as:
  // X direct view   (  0 radian angle)
  // Y indirect view ( 45 radian angle)
  // Z indirect view (180 radian angle)
  // They're XYZ fresnel values, you can use any float values
  // i.e: $phongfresnelranges " [ X Y Z ] "
  // NOTE: bellow Phong Fresnel Ranges take effect only at HLMV since will be overriden by BBQ Proxie
  //$phongfresnelranges " [ .3 .65 1.1 ] "  // my recommended values
  $phongfresnelranges " [ .12 .5 1 ] "      // my recommended values warped at Valve's default range
  //$phongfresnelranges " [ 1 .1 .1 ] "     // the most used values over the steam workshop

  // Phong Exponent
  // for override the default $phongexponenttexture's Red Channel (255 for this sample file)
  // you can unset with: $phongexponent ""
  // Exponent means how hard the surface is and higher values make phong gradient be sharper; 0 means smoother and 255 means a irrealistic hard surface
  // rasionable values are {{ 0 .. 127 }}
  $phongexponent "1"    // my recommended safe value, good for general HalfLambertian skin/surface
  //$phongexponent "7"  // starts to go more sharper phong gradients, "kinda" better for leather, and harder micro surface
  //$phongexponent "14" // you may wanna use this one for pseudo metalic or when $bumpmap will spread the entire phong
  //$phongexponent "40" // for metalic surfaces or $bumpmap which have aberrant bumps


  //////////////////////////////////////////////////////////////////////////////////
  // Tweak Phong
  //   WARNING: IT BREAK THE WHOLE EFFECT
  //////////////////////////////////////////////////////////////////////////////////
  $shinyblood "0"           // Set as False as failsafe parameter
  //$shinybloodexponent "8"


  //////////////////////////////////////////////////////////////////////////////////
  // Alpha
  //////////////////////////////////////////////////////////////////////////////////
  // require proxies to work better, modulate the transparency for the entire material
  $alpha "1.0"

  // set "1" to enable binary transparency
  $alphatest "0"

  // Translucent SHOULD NOT be used along $alphatest
  $translucent "0" // set "1" to enable gradient transparency, This will potentialy make a Z-Fighting if don't know when to use it

  // for $alphatest be antialiased, allow "gradient" steps based on MSAA Amount
  $allowalphatocoverage "1"

  // YOU SHOULD NEVER USE THIS SHIT, DONT BE SO LAZY TO DISABLE THE COVERAGE EFFECT!!
  //$alphatestreference ".7" // .7 is the default value


  //////////////////////////////////////////////////////////////////////////////////
  // Emissive Blend
  //////////////////////////////////////////////////////////////////////////////////
  "GPU>=2" // necessary to avoid make the model even more expensive for no good reason
  {
    $EmissiveBlendEnabled "1"            // It was earlier disabled by default, but for this sample and onwards would be enabled by default
  }
  $EmissiveBlendBaseTexture "vgui/white" // The trick is use te $BaseTexture here
  $EmissiveBlendTexture "vgui/white"     // this modulate how much effect. Note that use $BaseTexture may result into a mismatch into effect strenght but for a few cases archive a really good effect
  $EmissiveBlendFlowTexture "vgui/white" // unless you'll make animated effect leave as "vgui/white"
  $EmissiveBlendTint " [ .33 .33 .33 ] " // how much of this effect should be tinted over the $BaseTexture " [ .1 .1 .1 ] "
  $EmissiveStrength ".11"                // the strength of $EmissiveBlendTexture ( clamped between 0.000 ~ 1.000 )
  $EmissiveBlendStrength ".11"           // This is the actual strenght for Emissive effect, however it'll be over writen by $EmissiveStrength value
  $EmissiveBlendScrollVector " [ 0 0 ] " // X Y animation scroll speed


  //////////////////////////////////////////////////////////////////////////////////
  // Color Modulation
  //////////////////////////////////////////////////////////////////////////////////
  // Allow color tint
  $allowdiffusemodulation "1"

  // Tint before apply the $BaseTexture
  $blendtintcoloroverbase "0"

  // this is a reference color to be applyed along the $color parameter
  //$color2 " [ .973 .973 .975 ] "

  // we may have a too saturated color which allow use "greywish" color
  $color2 " [ .89 .89 .89 ] "


  //////////////////////////////////////////////////////////////////////////////////
  // Burn effect
  //////////////////////////////////////////////////////////////////////////////////
  $detail "models/infected/common/l4d2/ci_burning"
  $detailscale "1.972"
  $detailblendmode "0"
  $detailblendfactor ".000"


  //////////////////////////////////////////////////////////////////////////////////
  // Rim Light
  //////////////////////////////////////////////////////////////////////////////////
  // ShoutAFuckUp $RimLight, you don't have ANY visible effect in Left 4 Dead 2 due how light works for this game
  $rimlight "0" 


  //////////////////////////////////////////////////////////////////////////////////
  // Env Map
  //  Envmap / Reflections, recommended use a mask
  //////////////////////////////////////////////////////////////////////////////////
  //$envmap "env_cubemap"                 // The Envirovment texture. "env_cubemap" for auto. Change to make static.
  //$envmapcontrast "0"                   // how much is multply by color*color . 0 is the "natural" value ( not compatible with $Phong "1" )
  $envmapfresnel ".8"                     // Multiply Fresnel Envirovment by this value
  $envmaptint " [ .4 .4 .4 ] "            // {RGB} or [vector] values to tune EnvMap
  //$envmapfresnelminmaxexp " [ 0 1 2 ] " // Override the Min, Max and Exponent Fresnel values ( not compatible with $BumpMap )
  $EnvMapReference ".4"                   // EnvMap reference used to $envmaptint
  $EnvMapReference_0 ".4"                 // EnvMap reference used to $envmaptint Red   Channel
  $EnvMapReference_1 ".4"                 // EnvMap reference used to $envmaptint Green Channel
  $EnvMapReference_2 ".4"                 // EnvMap reference used to $envmaptint Blue  Channel


  //////////////////////////////////////////////////////////////////////////////////
  // Proxie Parameters
  //////////////////////////////////////////////////////////////////////////////////
  // cache Burn effect
  $BurnAmount ".0"
  $BurnMult "1.1"

  // cache BBQ for "wetness" based on fresnel
  $BBQAmount ".0"
  $BBQMult ".99"
  $BBQ ".0"

  // cache Light
  $Lighting ".5"

  // addiive boost the character ilumination by this ammount (default: 1)
  $LightingBoost ".972" // It uses median of the most "real world" albedo value, Snow. As (R+G+B)/3

  // clamp light for $color NOT $color2 and avoid make the model complete dark when $EmissiveBlendEnabled "0"
  // TODO: write a dynamic warp and solve the clamp waste amount
  $MinLighting ".8"
  $MaxLighting ".972"

  // just store a simpler variable for pupil light modulation
  // it behave like a ramp smooth for dark/light ambients
  // appear that .073 is our Open/Brighter magic number and 0.4 our Close/Darkener magic number
  $PupilOpenRate  ".073" // referece values: 1.1 (fast) || .3 (slower)
  $PupilCloseRate ".4"   // referece values: 1.1 (fast) || .3 (slower)

  // Store some dummy color variables, Don't touch it
  $zero ".0"
  $one "1.0"
  $clr ".0"
  $dummy ".0"
  $Half ".5"
  $Quarter ".25"
  $LightingHalf ".0"
  $LightingQuarter ".0"
  $LightingWarped ".0"
  $MinEmissive ".0"
  $EnvMapModulator ".0"

  //////////////////////////////////////////////////////////////////////////////////
  // Proxies
  //    Proxies are like code the VMT to have dynamic behaviours
  //////////////////////////////////////////////////////////////////////////////////
  Proxies {
    BurnLevel {
      resultVar $BurnAmount
    }
    Multiply {
      srcVar1 $BurnAmount
      srcVar2 $BurnMult
      resultVar $DetailBlendFactor
    }

    Pupil {
      TextureVar $lightwarptexture  // try get luminance from lightwarp
      TextureFrameNumVar $dummy     // as the name says just store this number for no reason
      PupilCloseRate $PupilOpenRate
      PupilOpenRate $PupilCloseRate
    }
    Multiply {
      srcVar1 $Half
      srcVar2 $Lighting
      resultVar $LightingHalf
    }
    Subtract {
      srcVar1 $LightingBoost
      srcVar2 $LightingHalf
      resultVar $clr
    }

    // We don't need Clamp anymore, EmissiveBlend is our "clamp", this is a safier method if $EmissiveBlendEnabled "0"
    Clamp {
      min $MinLighting
      max $MaxLighting
      srcVar1 $clr
      resultVar $clr
    }

    // Transferer our modulated color to $color Render Pass
    Equals {
      srcVar1 $clr
      resultVar "$color[0]"
    }
    Equals {
      srcVar1 $clr
      resultVar "$color[1]"
    }
    Equals {
      srcVar1 $clr
      resultVar "$color[2]"
    }

    // Emissive is supposed to take a small, but important role by default
    Multiply {
      srcVar1 $EmissiveStrength
      srcVar2 $EmissiveStrength
      resultVar $MinEmissive
    }
    Multiply {
      //srcVar1 $clr
      srcVar1 $Lighting                // Uses Raw value from $Lighting
      srcVar2 $EmissiveStrength        // Our base Strength for Emissive effect
      resultVar $EmissiveBlendStrength // Send the modulation to EmissiveBlendStrength
    }
    Clamp {
      min $MinEmissive
      max $MaxLighting
      srcVar1 $EmissiveBlendStrength
      resultVar $EmissiveBlendStrength
    }

    // create a weaker light to modulate EnvMapLight
    Multiply {
      srcVar1 $Quarter
      srcVar2 $LightingHalf
      resultVar $LightingQuarter
    }

    // Normalize 0 .. 1
    Clamp {
      min $zero
      max $one
      srcVar1 $LightingQuarter
      resultVar $LightingQuarter
    }

    // Note: WarpMinMax don't exist in L4D2
    //WrapMinMax {
    //  minVal $zero
    //  maxVal $one
    //  srcVar1 $Lighting
    //  resultVar $LightingWarped
    //}
    // EnvMap here is lying for when required
    Multiply {
      srcVar1 $LightingQuarter   // Re uses half-lighting
      srcVar2 $EnvMapReference   // Our base Strength for EnvMap effect
      resultVar $EnvMapModulator // Send the modulation to $EnvMapModulator
    }

    // Apply to $EnvMapTint
    Subtract {
      srcVar1 $EnvMapReference_0
      srcVar2 $EnvMapModulator
      resultVar "$envmaptint[0]"
    }
    Subtract {
      srcVar1 $EnvMapReference_1
      srcVar2 $EnvMapModulator
      resultVar "$envmaptint[1]"
    }
    Subtract {
      srcVar1 $EnvMapReference_2
      srcVar2 $EnvMapModulator
      resultVar "$envmaptint[2]"
    }

    // Add dynamic BBQ behaviour
    BBQLevel {
      resultVar $BBQAmount
    }
    Multiply {
      srcVar1 $BBQAmount
      srcVar2 $BBQMult
      resultVar $BBQ
    }

    Multiply {
      srcVar1 $PhongFresnelRange_0
      srcVar2 $BBQ
      resultVar "$PhongFresnelRanges[0]"
    }
    Multiply {
      srcVar1 $PhongFresnelRange_1
      srcVar2 $BBQ
      resultVar "$PhongFresnelRanges[1]"
    }
    Multiply {
      srcVar1 $PhongFresnelRange_2
      srcVar2 $BBQ
      resultVar "$PhongFresnelRanges[2]"
    }
  }
}
